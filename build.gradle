import groovy.json.JsonSlurper

plugins {
    id 'com.avast.gradle.docker-compose' version '0.6.9'
    id 'org.unbroken-dome.test-sets' version '1.4.2'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.hierynomus.license' version '0.14.0'
}

group 'io.bitgrillr'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'jacoco'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

testSets {
    integrationTest
    dockerTest
}

configurations {
    library
}

dependencies {
    library group: 'javax.json', name: 'javax.json-api', version: '1.1+'
    library group: 'org.glassfish', name: 'javax.json', version: '1.1+'
    library 'com.spotify:docker-client:8.10+'
    compileOnly group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.3+'
    testCompile group: 'cd.go.plugin', name: 'go-plugin-api', version: '17.3+'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13+'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0-beta.5'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0-beta.5'
    integrationTestCompile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5+'
    integrationTestCompile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.5+'

    configurations.compile.extendsFrom(configurations.library)
}

// build

processResources {
    filesNotMatching('**/task.template.html') { file -> file.expand project.properties }
}

jar {
    into('lib') {
        from configurations.library
    }
}

// unit tests

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    jacoco {
        includes = ['io.bitgrillr.*']
    }
}

task jacocoCodeclimate(type: Copy) {
    from 'build/reports/jacoco/test/jacocoTestReport.xml'
    into './'
    rename { fileName -> fileName.replace("jacocoTestReport.xml", "jacoco.xml") }
    filter { line -> line.replaceAll("io/", "src/main/java/io/") }
}

check.dependsOn jacocoTestReport
jacocoTestReport.mustRunAfter test
check.dependsOn jacocoCodeclimate
jacocoCodeclimate.mustRunAfter jacocoTestReport

// docker tests

dockerTest {
    jacoco {
        enabled false
    }
    if (System.getProperty('os.name').contains('Windows')) {
       systemProperty('gocddockerexecplugin.dockerhost', 'http://localhost:2375')
    }
}

check.dependsOn dockerTest
dockerTest.mustRunAfter test

// integration tests

processIntegrationTestResources {
    filesNotMatching(['**/passwd', '**/cruise-config.xml']) { file -> file.expand project.properties }
    filesMatching(['**/cruise-config.xml', '**/passwd']) { file -> file.mode = 0777 }
}

dockerCompose {
    useComposeFiles = ['build/resources/integrationTest/docker-compose.yml']
}

integrationTest {
    jacoco {
        enabled false
    }
    if (System.getProperty('os.name').contains('Windows')) {
        systemProperty('gocddockerexecplugin.dockerhost', 'http://localhost:2375')
    }
}

dockerCompose.isRequiredBy integrationTest
composeUp.dependsOn assemble
composeUp.dependsOn processIntegrationTestResources
check.dependsOn integrationTest
integrationTest.mustRunAfter dockerTest

// license shit

license {
    header project.file('LICENSE_HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
}

downloadLicenses {
    dependencyConfiguration = 'library'
}

task formatLicenses {
    doLast {
        def licenses = new JsonSlurper().parseText(new File('build/reports/license/dependency-license.json').text)
        new File('src/main/resources/THIRD-PARTY.md').withWriter { writer ->
            writer.writeLine '# Third-Party Software'
            writer.writeLine ''
            writer.writeLine 'This software makes use of the following third-party components.'
            writer.writeLine ''
            for (dep in licenses.dependencies) {
                writer.writeLine "* ${dep.name}"
                for (license in dep.licenses) {
                    writer.writeLine "  * [${license.name}](${license.url})"
                }
            }
        }
    }
}

formatLicenses.dependsOn 'downloadLicenses'